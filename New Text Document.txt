public final class RegexConstants {
    
    private RegexConstants() {
        throw new AssertionError("Cannot instantiate constants class");
    }
    
    // SKU ID Pattern: 3 uppercase letters followed by 4 digits (e.g., ABC1234)
    public static final String SKU_ID_REGEX = "^[A-Z]{3}\\d{4}$";
    public static final Pattern SKU_ID_PATTERN = Pattern.compile(SKU_ID_REGEX);
    
    // SKU Name Pattern: Only alphabets and spaces, 1-100 characters
    public static final String SKU_NAME_REGEX = "^[a-zA-Z\\s]{1,100}$";
    public static final Pattern SKU_NAME_PATTERN = Pattern.compile(SKU_NAME_REGEX);
    
    // Customer ID Pattern: Email (Gmail, Yahoo, Hotmail only)
    public static final String CUSTOMER_ID_REGEX = 
        "^[a-zA-Z0-9._-]+@(gmail|yahoo|hotmail)\\.(com|co\\.in)$";
    public static final Pattern CUSTOMER_ID_PATTERN = Pattern.compile(CUSTOMER_ID_REGEX);
    
    // Customer Name Pattern: Only alphabets and spaces, max 50 characters
    public static final String CUSTOMER_NAME_REGEX = "^[a-zA-Z\\s]{1,50}$";
    public static final Pattern CUSTOMER_NAME_PATTERN = Pattern.compile(CUSTOMER_NAME_REGEX);
    
    // Phone Number Pattern: +91-XXXXXXXXXX (10 digits with optional dashes/spaces)
    public static final String PHONE_NUMBER_REGEX = "^\\+91[\\s-]?\\d{10}$";
    public static final Pattern PHONE_NUMBER_PATTERN = Pattern.compile(PHONE_NUMBER_REGEX);
    
    // Price Pattern: Positive decimal number
    public static final String PRICE_REGEX = "^\\d+(\\.\\d{1,2})?$";
    public static final Pattern PRICE_PATTERN = Pattern.compile(PRICE_REGEX);
    
    // Quantity Pattern: Positive integer
    public static final String QUANTITY_REGEX = "^[1-9]\\d*$";
    public static final Pattern QUANTITY_PATTERN = Pattern.compile(QUANTITY_REGEX);
}
