package com.retail.purchasemanager.validator;

import com.retail.purchasemanager.constants.ErrorCodes;
import com.retail.purchasemanager.constants.LogMessages;
import com.retail.purchasemanager.constants.RegexConstants;
import com.retail.purchasemanager.exception.ValidationException;
import com.retail.purchasemanager.util.ErrorMessageUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.math.BigDecimal;

/**
 * Validator class for SKU data validation.
 * All validation methods throw ValidationException on failure.
 * 
 * @author Retail Team
 * @version 1.0
 */
public class SkuValidator {
    
    private static final Logger logger = LoggerFactory.getLogger(SkuValidator.class);
    private static final ErrorMessageUtil errorMessageUtil = ErrorMessageUtil.getInstance();
    
    /**
     * Validate SKU ID format.
     * 
     * @param skuId The SKU ID to validate
     * @throws ValidationException if validation fails
     */
    public void validateSkuId(String skuId) throws ValidationException {
        logger.debug(LogMessages.VALIDATION_SKU_ID, skuId);
        
        if (skuId == null || skuId.trim().isEmpty()) {
            String errorMessage = errorMessageUtil.getErrorMessage(ErrorCodes.VALIDATION_SKU_ID_INVALID);
            logger.warn(LogMessages.VALIDATION_FAILED, "SKU ID", skuId, "null or empty");
            throw new ValidationException(
                ErrorCodes.VALIDATION_SKU_ID_INVALID,
                errorMessage,
                "skuId",
                skuId
            );
        }
        
        if (!RegexConstants.SKU_ID_PATTERN.matcher(skuId).matches()) {
            String errorMessage = errorMessageUtil.getErrorMessage(ErrorCodes.VALIDATION_SKU_ID_INVALID);
            logger.warn(LogMessages.VALIDATION_FAILED, "SKU ID", skuId, "pattern mismatch");
            throw new ValidationException(
                ErrorCodes.VALIDATION_SKU_ID_INVALID,
                errorMessage,
                "skuId",
                skuId
            );
        }
        
        logger.debug(LogMessages.VALIDATION_SUCCESS, "SKU ID", skuId);
    }
    
    /**
     * Validate SKU Name format.
     * 
     * @param skuName The SKU name to validate
     * @throws ValidationException if validation fails
     */
    public void validateSkuName(String skuName) throws ValidationException {
        logger.debug(LogMessages.VALIDATION_SKU_NAME, skuName);
        
        if (skuName == null || skuName.trim().isEmpty()) {
            String errorMessage = errorMessageUtil.getErrorMessage(ErrorCodes.VALIDATION_SKU_NAME_INVALID);
            logger.warn(LogMessages.VALIDATION_FAILED, "SKU Name", skuName, "null or empty");
            throw new ValidationException(
                ErrorCodes.VALIDATION_SKU_NAME_INVALID,
                errorMessage,
                "skuName",
                skuName
            );
        }
        
        if (!RegexConstants.SKU_NAME_PATTERN.matcher(skuName).matches()) {
            String errorMessage = errorMessageUtil.getErrorMessage(ErrorCodes.VALIDATION_SKU_NAME_INVALID);
            logger.warn(LogMessages.VALIDATION_FAILED, "SKU Name", skuName, "pattern mismatch");
            throw new ValidationException(
                ErrorCodes.VALIDATION_SKU_NAME_INVALID,
                errorMessage,
                "skuName",
                skuName
            );
        }
        
        logger.debug(LogMessages.VALIDATION_SUCCESS, "SKU Name", skuName);
    }
    
    /**
     * Validate price value.
     * 
     * @param price The price to validate
     * @throws ValidationException if validation fails
     */
    public void validatePrice(BigDecimal price) throws ValidationException {
        logger.debug(LogMessages.VALIDATION_PRICE, price);
        
        if (price == null || price.compareTo(BigDecimal.ZERO) <= 0) {
            String errorMessage = errorMessageUtil.getErrorMessage(ErrorCodes.VALIDATION_PRICE_INVALID);
            logger.warn(LogMessages.VALIDATION_FAILED, "Price", price, "null or non-positive");
            throw new ValidationException(
                ErrorCodes.VALIDATION_PRICE_INVALID,
                errorMessage,
                "price",
                price != null ? price.toString() : "null"
            );
        }
        
        logger.debug(LogMessages.VALIDATION_SUCCESS, "Price", price);
    }
    
    /**
     * Validate quantity value.
     * 
     * @param quantity The quantity to validate
     * @throws ValidationException if validation fails
     */
    public void validateQuantity(int quantity) throws ValidationException {
        logger.debug(LogMessages.VALIDATION_QUANTITY, quantity);
        
        if (quantity < 0) {
            String errorMessage = errorMessageUtil.getErrorMessage(ErrorCodes.VALIDATION_QUANTITY_INVALID);
            logger.warn(LogMessages.VALIDATION_FAILED, "Quantity", quantity, "negative value");
            throw new ValidationException(
                ErrorCodes.VALIDATION_QUANTITY_INVALID,
                errorMessage,
                "quantity",
                String.valueOf(quantity)
            );
        }
        
        logger.debug(LogMessages.VALIDATION_SUCCESS, "Quantity", quantity);
    }
    
    /**
     * Validate threshold value.
     * 
     * @param threshold The threshold to validate
     * @throws ValidationException if validation fails
     */
    public void validateThreshold(int threshold) throws ValidationException {
        logger.debug(LogMessages.VALIDATION_STARTED, "Threshold");
        
        if (threshold <= 0) {
            String errorMessage = errorMessageUtil.getErrorMessage(ErrorCodes.VALIDATION_THRESHOLD_INVALID);
            logger.warn(LogMessages.VALIDATION_FAILED, "Threshold", threshold, "non-positive value");
            throw new ValidationException(
                ErrorCodes.VALIDATION_THRESHOLD_INVALID,
                errorMessage,
                "threshold",
                String.valueOf(threshold)
            );
        }
        
        logger.debug(LogMessages.VALIDATION_SUCCESS, "Threshold", threshold);
    }
    
    /**
     * Validate all SKU fields together.
     * 
     * @param skuId SKU ID
     * @param skuName SKU Name
     * @param price Price
     * @param quantity Quantity
     * @throws ValidationException if any validation fails
     */
    public void validateSkuData(String skuId, String skuName, BigDecimal price, int quantity) 
            throws ValidationException {
        validateSkuId(skuId);
        validateSkuName(skuName);
        validatePrice(price);
        validateQuantity(quantity);
    }
}
