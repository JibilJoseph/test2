package com.retail.purchasemanager.exception;

/**
 * Base exception class for all custom exceptions in the application.
 */
public class PurchaseManagerException extends Exception {
    
    private final String errorCode;
    
    public PurchaseManagerException(String errorCode, String message) {
        super(message);
        this.errorCode = errorCode;
    }
    
    public PurchaseManagerException(String errorCode, String message, Throwable cause) {
        super(message, cause);
        this.errorCode = errorCode;
    }
    
    public String getErrorCode() {
        return errorCode;
    }
}

// ============================================
// CSV Related Exceptions
// ============================================

/**
 * Exception thrown when CSV file is not found.
 */
class CSVFileNotFoundException extends PurchaseManagerException {
    
    public CSVFileNotFoundException(String errorCode, String message) {
        super(errorCode, message);
    }
    
    public CSVFileNotFoundException(String errorCode, String message, Throwable cause) {
        super(errorCode, message, cause);
    }
}

/**
 * Exception thrown when error occurs while reading CSV.
 */
class CSVReadException extends PurchaseManagerException {
    
    public CSVReadException(String errorCode, String message) {
        super(errorCode, message);
    }
    
    public CSVReadException(String errorCode, String message, Throwable cause) {
        super(errorCode, message, cause);
    }
}

/**
 * Exception thrown when CSV parsing fails.
 */
class CSVParseException extends PurchaseManagerException {
    
    public CSVParseException(String errorCode, String message) {
        super(errorCode, message);
    }
    
    public CSVParseException(String errorCode, String message, Throwable cause) {
        super(errorCode, message, cause);
    }
}

/**
 * Exception thrown when CSV file is empty.
 */
class CSVEmptyFileException extends PurchaseManagerException {
    
    public CSVEmptyFileException(String errorCode, String message) {
        super(errorCode, message);
    }
}

// ============================================
// Validation Related Exceptions
// ============================================

/**
 * Exception thrown when validation fails.
 */
class ValidationException extends PurchaseManagerException {
    
    private final String fieldName;
    private final String fieldValue;
    
    public ValidationException(String errorCode, String message, String fieldName, String fieldValue) {
        super(errorCode, message);
        this.fieldName = fieldName;
        this.fieldValue = fieldValue;
    }
    
    public String getFieldName() {
        return fieldName;
    }
    
    public String getFieldValue() {
        return fieldValue;
    }
}

// ============================================
// Business Logic Exceptions
// ============================================

/**
 * Exception thrown when business logic validation fails.
 */
class BusinessException extends PurchaseManagerException {
    
    public BusinessException(String errorCode, String message) {
        super(errorCode, message);
    }
    
    public BusinessException(String errorCode, String message, Throwable cause) {
        super(errorCode, message, cause);
    }
}

/**
 * Exception thrown when no data found.
 */
class DataNotFoundException extends PurchaseManagerException {
    
    public DataNotFoundException(String errorCode, String message) {
        super(errorCode, message);
    }
}
